;Computer Organization & Assembly 
; Task 4 - Group Members: Ashley Scott 2005752, Aaliyah Adebukunola 2103579, Shaqur Adair 1901884

.model small
.stack 100h
.data
    menuMsg db "Simple Calculator",13,10
            db "1) Add",13,10
            db "2) Multiply",13,10
            db "3) Exit",13,10,0
    choicePrompt db 13,10,"Enter your choice (1-3): $"
    numPrompt db 13,10,"Enter two numbers separated by space: $"
    resultMsg db 13,10,"The result is: $"
    errMsg db 13,10,"Invalid input, please try again.",13,10
    invalidChoiceMsg db 13,10,"Invalid choice, please enter a number between 1 and 3.",13,10
    invalidNumMsg db 13,10,"Invalid numbers, please enter two valid numbers (0-9).",13,10
    buffer db 10 ; Max characters buffer can hold
           db ? ; DOS will fill this with the actual number of characters read
           db 10 dup(0) ; Characters read from console
    choice db ?
    num1 db ?
    terminateFlag db 0 ; Flag to indicate program termination
    displayMenuFlag db 1 ; Flag to control the display of the menu message

.code
start:
    mov ax, @data
    mov ds, ax

    ; Display the menu and prompt for the choice once at the beginning
    call displayMenu
    call getChoice
    mov displayMenuFlag, 0 ; Set displayMenuFlag to 0 to prevent re-displaying the menu

main_menu:
    ; Process the user's choice
    cmp choice, '1'
    je addNumbers
    cmp choice, '2'
    je multiplyNumbers
    cmp choice, '3'
    je setTerminateFlag

    ; Invalid choice, display error message
    call displayError

    ; Re-prompt for the choice
    call getChoice
    jmp main_menu ; Loop back to main menu

addNumbers:
    call getNumbers
    cmp [buffer+2], '0'
    jl invalidNum
    cmp [buffer+4], '0'
    jl invalidNum
    mov al, [buffer+2]
    sub al, '0'
    mov bl, [buffer+4]
    sub bl, '0'
    add al, bl
    mov num1, al
    call displayResult
    jmp main_menu ; Return to main menu after calculation

multiplyNumbers:
    call getNumbers
    cmp [buffer+2], '0'
    jl invalidNum
    cmp [buffer+4], '0'
    jl invalidNum
    mov al, [buffer+2]
    sub al, '0'
    mov bl, [buffer+4]
    sub bl, '0'
    mul bl
    mov num1, al
    call displayResult
    jmp main_menu ; Return to main menu after calculation

invalidNum:
    call displayInvalidNumMsg
    jmp main_menu ; Return to main menu after displaying error message

setTerminateFlag:
    mov terminateFlag, 1 ; Set terminate flag to exit the program
    jmp endProgram ; Jump to endProgram

getChoice:
    cmp displayMenuFlag, 1
    je displayChoicePrompt
    ret

displayChoicePrompt:
    mov ah, 09h
    lea dx, choicePrompt
    int 21h
    mov ah, 01h
    int 21h
    mov choice, al
    mov displayMenuFlag, 1 ; Set displayMenuFlag to 1 to allow re-displaying the menu
    ret

getNumbers:
    mov ah, 09h
    lea dx, numPrompt
    int 21h
    lea dx, buffer
    mov ah, 0Ah
    int 21h
    ret

displayMenu:
    mov ah, 09h
    lea dx, menuMsg
    int 21h
    ret

displayResult:
    mov ah, 09h
    lea dx, resultMsg
    int 21h
    mov dl, num1
    add dl, '0'
    int 21h
    ret

displayError:
    mov ah, 09h
    lea dx, errMsg
    int 21h
    ret

displayInvalidNumMsg:
    mov ah, 09h
    lea dx, invalidNumMsg
    int 21h
    ret

endProgram:
    mov ah, 4Ch
    int 21h
    ret
end start


